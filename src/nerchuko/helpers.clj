(ns nerchuko.helpers
  "Functions that help with various auxiliary tasks such
as converting documents to the necessary format etc."
  (:use nerchuko.utils
        clj-text.tokenization)
  (:use [clojure.contrib.duck-streams :only (spit)]))

(defn save-model
  "Saves model to a file."
  [file model]
  (binding [*print-dup* true]
    (spit file
          (pr-str (merge {} model)))))

(defn load-model
  "Load model from a file."
  [file]
  (read-string (slurp file)))

(defstruct
    #^{:doc "A structure basis for a model generated by
a classifier.
:classifier  A symbol representing the namespace of the
             classifier used to generate the model.
:classes     A set of all the classes.
:features    A set of all the features."}
  model
  :classifier :classes :features)

(defmulti
  #^{:arglists '([doc])
     :doc "Returns a features-map i.e. a map with features as keys and
the number of occurrences of those features as the corresponding
values. Most feature-selection and several of the classification
algorithms require a features-map as the input.

Here is how different kind of docs get converted to a features-map:

Strings: The string is tokenized (using
    clj-text.tokenization/tokenize) and the tokens become the
    features. The number of times each token occurs in the string is
    the corresponding value.

Collections (vectors, lists, sets etc.): Each item in the seq is
    treated as a feature and the number of occurrences of the item is
    the corresponding value.

Maps: First, all the string vals are tokenized. Then
    nerchuko.utils/flatten-map is called to obtain a
    seq. build-features-map is recursively called on this to get the
    final return value."}
  build-features-map class)

(defmethod build-features-map String [doc]
  (build-features-map (tokenize doc)))

(defmethod build-features-map java.util.Map [doc]
  (->> doc
       (map (fn [[key val]]
              (if (string? val)
                {key (tokenize val)}
                {key val})))
       (reduce merge)
       flatten-map
       build-features-map))

(defmethod build-features-map java.util.Collection [doc]
  (counts doc))

(defn build-features-map-for-dataset
  "Calls build-features-map on every doc in the dataset returns a
  dataset with the features-maps in place of the docs."
  [dataset]
  (map-on-firsts build-features-map
                 dataset))
